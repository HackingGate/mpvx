name: Promote Pre-release to Release

on:
  schedule:
    - cron: '30 23 * * *'
  workflow_dispatch:

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Check pre-release age
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              if (releases.data.length === 0) {
                core.setFailed('No releases found');
                return;
              }
              const latestRelease = releases.data[0];
              if (!latestRelease.prerelease) {
                core.setFailed('Latest release is not a pre-release');
                return;
              }
              const releaseDate = new Date(latestRelease.published_at);
              const now = new Date();
              const hoursDiff = (now - releaseDate) / (1000 * 60 * 60);
              if (hoursDiff < 24) {
                core.setFailed(`Pre-release is only ${Math.floor(hoursDiff)} hours old. Need to wait ${Math.ceil(24 - hoursDiff)} more hours.`);
                return;
              }
              core.setOutput('release_id', latestRelease.id);
              core.setOutput('tag_name', latestRelease.tag_name);
              console.log(`Pre-release ${latestRelease.tag_name} is ${Math.floor(hoursDiff)} hours old - proceeding with promotion...`);
            } catch (error) {
              core.setFailed(`Error checking release: ${error.message}`);
            }

      - name: Update to full release
        if: steps.check_release.outputs.release_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = '${{ steps.check_release.outputs.release_id }}';
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              prerelease: false
            });
            console.log(`Promoted release ID ${releaseId} to a full release`);

  update-pages:
    runs-on: ubuntu-latest
    needs: promote
    if: always()
    steps:
      - name: Get latest official (non–prerelease) release
        id: get_latest_official_release
        uses: actions/github-script@v7
        with:
          script: |
            /*
              This calls the GitHub API endpoint:
                GET /repos/{owner}/{repo}/releases/latest
              which returns the most recent *non–prerelease* release.
              If no official release exists yet, it 404s.
            */
            try {
              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              core.setOutput('found', 'true');
              core.setOutput('tag_name', release.data.tag_name);
              console.log(`Latest official release: ${release.data.tag_name}`);
            } catch (error) {
              if (error.status === 404) {
                // Means there's no official release yet
                console.log('No official (non-prerelease) release found. Skipping...');
                core.setOutput('found', 'false');
              } else {
                core.setFailed(error.message);
              }
            }
      - name: Create dist folder
        if: steps.get_latest_official_release.outputs.found == 'true'
        run: |
          mkdir -p dist/appcast
      - name: Download appcast.xml
        if: steps.get_latest_official_release.outputs.found == 'true'
        uses: actions/github-cli@v1
        with:
          args: |
            release download \
              --owner $GITHUB_REPOSITORY_OWNER \
              --repo $GITHUB_REPOSITORY \
              --tag ${{ steps.get_latest_official_release.outputs.tag_name }} \
              --pattern appcast.xml \
              --dir dist/appcast

      - name: Deploy to GitHub Pages
        if: steps.get_latest_official_release.outputs.found == 'true'
        run: |
          echo "We have a latest official release: ${{ steps.get_latest_official_release.outputs.tag_name }}"
          echo "Deploying appcast.xml to GitHub Pages..."
          git config --global user.email "[email protected]"
          git config --global user.name "github-actions"
          git clone --depth 1 --branch gh-pages "https://github.com/${GITHUB_REPOSITORY}.git" gh-pages
          cp dist/appcast/appcast.xml gh-pages/appcast.xml
          cd gh-pages
          git add appcast.xml
          git commit -m "Update appcast.xml for release ${{ steps.get_latest_official_release.outputs.tag_name }}"
          git push origin gh-pages
