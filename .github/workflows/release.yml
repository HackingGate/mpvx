name: Release

on:
  push:
    tags:
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ["Build and Test"]
    types:
      - completed

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Release Note
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wget --header="Authorization: Bearer ${GITHUB_TOKEN}" ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases\?per_page\=1 -O releases.json
          cat releases.json | jq
          LATEST_TAG=`cat releases.json | jq -r '.[0].tag_name'`
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            NEXT_TAG=`echo ${GITHUB_REF} | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+'`
            echo "# Release ${NEXT_TAG}" > release_note.md
            echo "" >> release_note.md
            echo "## Changes from \`${LATEST_TAG}\` to \`${NEXT_TAG}\`" >> release_note.md
            echo "" >> release_note.md
            git log --pretty="* %h - %s" ${LATEST_TAG}..${NEXT_TAG} | tee -a release_note.md
          else
            HEAD_HASH=`git rev-parse --short HEAD`
            echo "# Development Build" > release_note.md
            echo "" >> release_note.md
            echo "## Changes from \`${LATEST_TAG}\` to \`${HEAD_HASH}\`" >> release_note.md
            echo "" >> release_note.md
            git log --pretty="* %h - %s" ${LATEST_TAG}..HEAD | tee -a release_note.md
          fi
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Setup
        run: |
          ./setup.sh
      - name: Build
        run: |
          xcodebuild clean build \
            -scheme mpvx \
            -configuration Release \
            -derivedDataPath build \
            -destination 'generic/platform=macOS'
      - name: Create .dmg
        run: |
          mkdir -p dist
          hdiutil create -volname "mpvx" -srcfolder ./build/Build/Products/Release/mpvx.app -ov -format UDZO ./dist/mpvx.dmg
      - name: Upload .dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpvx.dmg
          path: ./dist/mpvx.dmg
      - name: Upload release note
        uses: actions/upload-artifact@v4
        with:
          name: release_note.md
          path: ./release_note.md
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/mpvx.dmg
          body_path: release_note.md
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
