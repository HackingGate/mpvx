name: Release

on:
  push:
    tags:
      - "*"
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch Releases
        id: fetch_releases
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
          HEADERS="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          releases=$(curl -s -H "$HEADERS" "$API_URL" | jq '.')
          echo "$releases" > releases.json
      - name: Generate Release Note
        run: |
          LATEST_TAG=$(cat releases.json | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            NEXT_TAG=$(echo ${GITHUB_REF} | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+')
            echo "# Release ${NEXT_TAG}" > release_note.md
            echo "" >> release_note.md
            echo "## Changes from \`${LATEST_TAG}\` to \`${NEXT_TAG}\`" >> release_note.md
            echo "" >> release_note.md
            git log --pretty="* %h - %s" ${LATEST_TAG}..${NEXT_TAG} | tee -a release_note.md
          else
            HEAD_HASH=$(git rev-parse --short HEAD)
            echo "# Development Build" > release_note.md
            echo "" >> release_note.md
            echo "## Changes from \`${LATEST_TAG}\` to \`${HEAD_HASH}\`" >> release_note.md
            echo "" >> release_note.md
            git log --pretty="* %h - %s" ${LATEST_TAG}..HEAD | tee -a release_note.md
          fi
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Setup
        run: |
          API_KEY=${{ secrets.API_KEY }} GOOGLE_APP_ID=${{ secrets.GOOGLE_APP_ID }} GCM_SENDER_ID=${{ secrets.GCM_SENDER_ID }} ./setup.sh
      - name: Restore Build Cache
        uses: actions/cache@v4
        with:
          path: build
          key: release-build-cache-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            release-build-cache-${{ runner.os }}-
      - name: Archive
        run: |
          xcodebuild archive \
            -scheme mpvx \
            -configuration Release \
            -archivePath build/mpvx.xcarchive \
            -destination "platform=macOS"
      - name: Install create-dmg
        run: |
          brew install create-dmg
      - name: Get Tag
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Create .dmg with Applications folder
        run: |
          mkdir -p dist/${{ steps.get_tag.outputs.tag }}
          create-dmg \
            --volname "mpvx" \
            --window-pos 200 200 \
            --window-size 600 400 \
            --icon-size 100 \
            --app-drop-link 400 200 \
            --icon "mpvx.app" 200 200 \
            ./dist/${{ steps.get_tag.outputs.tag }}/mpvx.dmg \
            ./build/mpvx.xcarchive/Products/Applications/mpvx.app
      - name: Download Sparkle CLI (version from Package.resolved)
        run: |
          SPARKLE_VERSION=$(jq -r '.pins[] | select(.identity == "sparkle") | .state.version' mpvx.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
          if [ -z "$SPARKLE_VERSION" ]; then
            echo "Error: Could not determine Sparkle version from Package.resolved."
            exit 1
          fi
          echo "Detected Sparkle version: $SPARKLE_VERSION"
          DOWNLOAD_URL="https://github.com/sparkle-project/Sparkle/releases/download/${SPARKLE_VERSION}/Sparkle-for-Swift-Package-Manager.zip"
          echo "Downloading Sparkle CLI from \`${DOWNLOAD_URL}\`..."
          wget -O /tmp/Sparkle-for-Swift-Package-Manager.zip "${DOWNLOAD_URL}"
          unzip /tmp/Sparkle-for-Swift-Package-Manager.zip -d /tmp/sparkle
          chmod +x /tmp/sparkle/bin/generate_appcast
          chmod +x /tmp/sparkle/bin/sign_update
          cp /tmp/sparkle/bin/generate_appcast $GITHUB_WORKSPACE/
          cp /tmp/sparkle/bin/sign_update $GITHUB_WORKSPACE/
      - name: Decode and save private key
        run: |
          echo "${{ secrets.SPARKLE_ED25519_PRIVATE_BASE64 }}" | base64 --decode > ed25519_private.pem
          chmod 600 ed25519_private.pem
      - name: Fetch existing appcast
        run: |
          echo "Fetching existing appcast.xml from https://mpvx.hackinggate.com/appcast.xml ..."
          curl -fSL "https://mpvx.hackinggate.com/appcast.xml" -o ./dist/appcast.xml || echo "No existing appcast.xml found at https://mpvx.hackinggate.com/appcast.xml."
      - name: Fetch and download last 3 DMGs
        run: |
          DIST_FOLDER="./dist"
          releases=$(cat releases.json | jq '[.[] | select(.prerelease == false)] | .[:3]')
          echo "$releases" | jq -c '.[]' | while read -r release; do
            version=$(echo "$release" | jq -r '.tag_name')
            asset=$(echo "$release" | jq -c '.assets[] | select(.name | endswith(".dmg"))' | head -n 1)
            if [ -z "$asset" ]; then
              echo "No .dmg file found for release $version"
              continue
            fi
            download_url=$(echo "$asset" | jq -r '.browser_download_url')
            mkdir -p "$DIST_FOLDER/$version"
            output_file="$DIST_FOLDER/$version/$(basename $download_url)"
            echo "Downloading $download_url as $output_file..."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "$output_file" "$download_url"
            echo "Saved $output_file"
          done
      - name: Generate Appcast
        run: |
          echo "Generating appcast (with signing enabled) ..."
          ./generate_appcast \
            --ed-key-file ed25519_private.pem \
            -o ./dist/appcast.xml \
            --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/" \
            ./dist
          ls -alR ./dist
      - name: Save Build Cache
        uses: actions/cache@v4
        with:
          path: build
          key: release-build-cache-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
      - name: Upload mpvx.dmg as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpvx.dmg
          path: ./dist/mpvx.dmg
      - name: Upload appcast.xml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: appcast.xml
          path: ./dist/appcast.xml
      - name: Upload delta files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: delta_files
          path: ./dist/*.delta
      - name: Upload release note
        uses: actions/upload-artifact@v4
        with:
          name: release_note.md
          path: ./release_note.md
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./dist/mpvx.dmg
            ./dist/appcast.xml
            ./dist/*.delta
          body_path: release_note.md
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
